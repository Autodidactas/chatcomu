// Generated by CoffeeScript 1.4.0
(function() {
  var app, colors, conectados, config, express, fb, http, io, model, mongoose, nib, ntwitter, passport, passport_facebook, passport_twitter, path, redis, redisAuth, redisClient, routes, server, stylus, underscore, _;

  colors = require('colors');

  express = require('express');

  app = express();

  nib = require('nib');

  http = require('http');

  path = require('path');

  redis = require('redis');

  stylus = require('stylus');

  server = http.createServer(app);

  ntwitter = require('ntwitter');

  fb = require('fb');

  io = require('socket.io').listen(server, {
    log: false
  });

  _ = underscore = require('underscore');

  _.str = underscore.str = require('underscore.string');

  _.mixin(_.str.exports());

  routes = require('./routes');

  config = require('./config.json');

  mongoose = require('mongoose');

  mongoose.connect(config.mongodb.url);

  model = require('./models');

  passport = require('passport');

  passport_twitter = require('passport-twitter').Strategy;

  passport_facebook = require('passport-facebook').Strategy;

  conectados = 0;

  passport.serializeUser(function(user, next) {
    return model.user.serialize(user, next);
  });

  passport.deserializeUser(function(id, next) {
    return model.user.deserialize(id, next);
  });

  passport.use(new passport_twitter(config.twitter, function(token, tokenSecret, profile, next) {
    return model.user.twitter(token, tokenSecret, profile, next);
  }));

  passport.use(new passport_facebook(config.facebook, function(token, tokenSecret, profile, next) {
    return model.user.facebook(token, tokenSecret, profile, next);
  }));

  app.configure(function() {
    app.set('port', process.env.WWW_PORT || 8080);
    app.set('views', __dirname + '/views');
    app.set('view engine', 'jade');
    app.use(express.logger());
    app.use(express.cookieParser());
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    app.use(express.session({
      cookie: {
        path: '/',
        httpOnly: true,
        maxAge: 31556926000
      },
      secret: 'comu'
    }));
    app.use(passport.initialize());
    app.use(passport.session());
    app.use(app.router);
    app.use(stylus.middleware({
      src: __dirname + '/public',
      compile: function(str, path) {
        return stylus(str).set('filename', path).set('compress', true).use(nib());
      }
    }));
    return app.use(express["static"](path.join(__dirname, 'public')));
  });

  app.configure('development', function() {
    return app.use(express.errorHandler());
  });

  app.get('/', routes.index);

  app.get('/auth/twitter', passport.authenticate('twitter'));

  app.get('/auth/twitter/callback', passport.authenticate('twitter', {
    successRedirect: '/auth/login',
    failureRedirect: '/auth/login'
  }));

  app.get('/auth/facebook', passport.authenticate('facebook', {
    scope: config.facebook.permissions
  }));

  app.get('/auth/facebook/callback', passport.authenticate('facebook', {
    successRedirect: '/auth/login',
    failureRedirect: '/auth/login'
  }));

  app.get('/auth/login', routes.login);

  app.get('/logout', function(req, res) {
    req.logout();
    return res.redirect('/');
  });

  server.listen(app.get('port'), function() {
    return console.log("Express server listening on port " + app.get('port'));
  });

  redisClient = redis.createClient(config.redisdb.port, config.redisdb.host);

  redisAuth = function() {
    redisClient.auth(config.redisdb.password);
    return console.log('Redis client connected');
  };

  redisClient.addListener('connected', redisAuth);

  redisClient.addListener('reconnected', redisAuth);

  redisAuth();

  io.sockets.on('connection', function(client) {
    var totalConectados;
    conectados++;
    redisClient.lrange('mensajes', 0, -1, function(err, mensajes) {
      try {
        mensajes = mensajes.reverse();
        return _.each(mensajes, function(mensaje) {
          mensaje = JSON.parse(mensaje);
          return client.emit('mensajes anteriores', mensaje);
        });
      } catch (error) {
        console.log('------------------------- start error -------------------------'.red);
        console.log(error);
        return console.log('-------------------------- end error --------------------------'.red);
      }
    });
    client.on('mensaje', function(data) {
      return model.user.findOne({
        'username': data.user.name
      }, function(err, user) {
        var callback, hashtag, mensaje, tweet, twit, _length;
        if (user && !_.isBlank(data.texto)) {
          data.texto = _.escapeHTML(data.texto);
          data.location = user.location;
          if (data.publicar) {
            if (data.user.provider === 'twitter') {
              hashtag = ' ' + config.twitter.hashtag;
              _length = 140 - hashtag.length;
              tweet = data.texto.substr(0, _length) + hashtag;
              callback = function() {};
              twit = new ntwitter({
                consumer_key: config.twitter.consumerKey,
                consumer_secret: config.twitter.consumerSecret,
                access_token_key: user.twitter.token,
                access_token_secret: user.twitter.token_secret
              });
              twit.verifyCredentials(callback).updateStatus(tweet, callback);
            } else if (data.user.provider === 'facebook') {
              mensaje = data.texto + ' ' + config.twitter.hashtag;
              fb.setAccessToken(user.facebook.token_secret);
              fb.api('me/feed', 'post', {
                message: mensaje
              }, function(res) {
                var _ref;
                if (!res || res.error) {
                  console.log((_ref = !res) != null ? _ref : {
                    'error occurred': res.error
                  });
                }
              });
            }
          }
          io.sockets.emit('mensaje', data);
          data = JSON.stringify(data);
          return redisClient.lpush('mensajes', data, function(err, response) {
            return redisClient.ltrim('mensajes', 0, 49);
          });
        }
      });
    });
    client.on('disconnect', function() {
      conectados--;
      return totalConectados();
    });
    client.on('bannear', function(data, staff) {
      return model.user.findOne({
        'username': data
      }, function(err, doc) {
        if (err) {
          return next(err);
        }
        if (doc) {
          doc.banned = true;
          return doc.save(function(err) {
            if (err) {
              throw err;
            }
            io.sockets.emit('bye', data);
            return console.log(data.red + ' ha sido banneado :/ por '.blue + staff.yellow);
          });
        }
      });
    });
    return (totalConectados = function() {
      return io.sockets.emit('total conectados', conectados);
    })();
  });

}).call(this);
